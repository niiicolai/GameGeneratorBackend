# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy JAR app to DigitalOcean

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  JDBC_DATABASE_URL: ${{ secrets.JDBC_DATABASE_URL }}
  JDBC_USERNAME: ${{ secrets.JDBC_USERNAME }}
  JDBC_PASSWORD: ${{ secrets.JDBC_PASSWORD }}
  API_KEY: ${{ secrets.API_KEY }}
  IMAGE_API_KEY: ${{ secrets.IMAGE_API_KEY }}
  TOKEN_ISSUER: ${{ secrets.TOKEN_ISSUER }}
  TOKEN_EXPIRATION: ${{ secrets.TOKEN_EXPIRATION }}
  DEFAULT_USER_NAME: ${{ secrets.DEFAULT_USER_NAME }}
  DEFAULT_USER_PASS: ${{ secrets.DEFAULT_USER_PASS }}
  DEFAULT_USER_CREDIT: ${{ secrets.DEFAULT_USER_CREDIT }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Java version
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Build with Maven
        run: mvn clean install

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: java-app
          path: '${{ github.workspace }}/target/*.jar'
  deploy:
    runs-on: ubuntu-22.04
    
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and save Docker image
        run: |
          docker build -t ${{ secrets.IMAGE_NAME }} \
            --build-arg JDBC_DATABASE_URL=$JDBC_DATABASE_URL \
            --build-arg JDBC_USERNAME=$JDBC_USERNAME \
            --build-arg JDBC_PASSWORD=$JDBC_PASSWORD \
            --build-arg API_KEY=$API_KEY \
            --build-arg IMAGE_API_KEY=$IMAGE_API_KEY \
            --build-arg TOKEN_ISSUER=$TOKEN_ISSUER \
            --build-arg TOKEN_EXPIRATION=$TOKEN_EXPIRATION \
            --build-arg DEFAULT_USER_NAME=$DEFAULT_USER_NAME \
            --build-arg DEFAULT_USER_PASS=$DEFAULT_USER_PASS \
            --build-arg DEFAULT_USER_CREDIT=$DEFAULT_USER_CREDIT \
            .
          docker save ${{ secrets.IMAGE_NAME }} > "${{ secrets.IMAGE_NAME }}.tar"

      - name: Upload image artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ secrets.IMAGE_NAME }}
          path: "${{ secrets.IMAGE_NAME }}.tar"

      - name: Copy Docker Image to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "${{ secrets.IMAGE_NAME }}.tar"
          target: /root/containers/

      - name: Start new container using the new image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop ${{ secrets.IMAGE_NAME }}
            docker rm ${{ secrets.IMAGE_NAME }}
            docker load < "/root/containers/${{ secrets.IMAGE_NAME }}.tar"
            docker run -d --name ${{ secrets.IMAGE_NAME }} -p ${{ secrets.IMAGE_PORT_OUT }}:${{ secrets.IMAGE_PORT_IN }} ${{ secrets.IMAGE_NAME }}
            exit